#!/usr/bin/env python3
import os 
import argparse
import sys

def parse_arguments():
    parser = argparse.ArgumentParser(prog='rasp',
                                     description='RASSI Parser')
    parser.add_argument('rassi_output', type=open,
                        help='''Output file of the RASSI calculation''')
    parser.add_argument('-o', nargs='?', type=argparse.FileType('w'),
                        metavar='OUTFILE', default=sys.stdout,
                        help='Output of the script. Default is stdout.')
    parser.add_argument('-spectype', choices=['v', 'l', 'm'], 
                        metavar='SPECTYPE', default='l',
                        help='Type of spectrum to plot. v, \
                              l and m are velocity, length \
                              and magnetic transitions')
    parser.add_argument('--units', choices=['cm', 'ev', 'nm'], 
                        metavar='UNIT', default='nm',
                        help='Units for the specturm. Default nm')
    parser.add_argument('-so', action='store_true',
                        help='Plot Spin-Orbit states. Default off')
    parser.add_argument('-py', action='store_true',
                        help='Output in python format')
    args = parser.parse_args()
    args.filename = args.rassi_output.name
    return args

def get_roots(args):
    roots = {}
    flag_line = 'Eigenvalues of complex Hamiltonian' if args.so else 'SPIN-FREE ENERGIES:'
    breakline = 'Weights' if args.so else 'Dipole'
    started = 0
    EMIN = 0
    for line in args.rassi_output:
        if started and breakline in line: break
        if flag_line in line:
            started = 1
        if not started: continue
        if 'EMIN (a.u.)' in line:
            EMIN = float(line.split()[-1].strip(')'))
            args.EMIN = EMIN
        if EMIN:
            try:
                roots[int(line.split()[0])] = float(line.split()[1]) + EMIN
            except ValueError:
                continue
            except IndexError:
                continue
    args.roots = roots
    return roots

def get_spectrum(args):
    roots = {}
    spec_lines = {'l': '++ Dipole transition strengths',
                  'v': '++ Velocity transition strengths',
                  'm':  '++ Magnetic-Dipole'}
    flag_line = spec_lines[args.spectype]
    started = 0
    spectrum = {}
    for line in args.rassi_output:
        if flag_line in line:
            started = 1
        if not started or not line.split(): continue
        if line.split()[0] == '--': 
            break
        try:
            initial, final, osc_str, a_x, a_y, a_z, *rest = line.split()
            initial, final = map(int, (initial, final))
            osc_str, a_x, a_y, a_z = map(float, (osc_str, a_x, a_y, a_z))
            delta_e = args.roots[final] - args.roots[initial]
            delta_e_ev = delta_e * 27.211396641308
            delta_e_cm = ((delta_e_ev * 1.602177e-19)/(6.62607015e-34 * 299792458)) / 100
            delta_e_nm = 1/delta_e_cm * 10e6
            e = {'ev': delta_e_ev,
                 'cm': delta_e_cm, 
                 'nm': delta_e_nm}
            #spectrum[e[args.units]] = (osc_str, a_x, a_y, a_z, )
            spectrum[f'{initial}->{final}'] = (e[args.units], osc_str, a_x, a_y, a_z)
        except ValueError:
            continue
    #args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[0])}
    args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[1][0])}
    return spectrum


def print_spectrum(args):
    if not args.py:
        print(f'transition', f'energy_{args.units}','oscillator strength', file=args.o, sep=',')
        for k, v in args.spectrum.items():
            print(k, v[0], v[1], file=args.o, sep=',')
        return
    print(f'data_{args.spectype} = ', '{', file=args.o)
    for k, v in args.spectrum.items():
        print(' '*4, f"'{k}' : ", 
              '{', 
              f"'energy_{args.units}': {v[0]}, 'oscillator_strength': {v[1]},", 
              file=args.o)
    print('}', file=args.o)

def main():
    args = parse_arguments()
    roots = get_roots(args)
    get_spectrum(args)
    args.rassi_output.close()
    print_spectrum(args)


if __name__ == '__main__':
    main()
